####description.tsx####
import React from "react";

const Description = () => {
  return (
    <div className='description'>
      <h3>Movie Search App</h3>
      This app will be able to search for movies via the OMDB API and render the results to the user
    </div>
  )
};

export default Description;

####detail.tsx####
import React, { useEffect, useState } from "react";
import { MovieProps } from "@/interface/MovieProps";
import { useParams } from "react-router-dom";
import axios from "axios";

const Detail = () => {
  const imdbId = useParams().imdbID;
  const [movie, setMovie] = useState({} as MovieProps);

  useEffect(() => {
    axios.get(`https://www.omdbapi.com/?i=${imdbId}&plot=full&apikey=4a3b711b`)
      .then((jsonResponse) => {
        setMovie(jsonResponse.data)
      })
  }, [imdbId]);

  return (
    <>
      <div className='details'>
        <h3>Title: {movie.Title}</h3>
        <p>ID: {imdbId}</p>
        <p>Released: {movie.Released}</p>
        <p>Genre: {movie.Genre}</p>
        <p>Plot: {movie.Plot}</p>
        <p>Country: {movie.Country}</p>
        <p>Director: {movie.Director}</p>
        <p>Actors: {movie.Actors}</p>
      </div>
    </>
  );
};

export default Detail;

####header.tsx####
import React from 'react';

const Header = (props : {text: string}) => {
  return (
    <header className="App-header">
      <h2>{props.text}</h2>
    </header>
  );
};

export default Header;

####home.tsx####
import React from "react";
import Description from "./Description";

const Home = () => {
  return (
    <div className='Home'>
      <Description />
    </div>
  );
};

export default Home;

####modal.tsx####
import React, { useEffect, useState } from "react";
import { useRef } from "react";
import { useNavigate, useParams } from "react-router";
import { Dialog } from '@reach/dialog';
import { MovieProps } from "@/interface/MovieProps";
import axios from "axios";
import { Button } from "@material-ui/core";
import CloseIcon from '@mui/icons-material/Close';

const Modal = () => {
  const navigate = useNavigate();
  const buttonRef = useRef<SVGSVGElement>(null);

  const onDismiss = () => {
    navigate(-1);
  };

  const imdbId = useParams().imdbId;
  const [movie, setMovie] = useState({} as MovieProps);

  useEffect(() => {
    axios.get(`https://www.omdbapi.com/?i=${imdbId}&plot=full&apikey=4a3b711b`)
      .then((jsonResponse) => {
        setMovie(jsonResponse.data)
      })
  }, []);

  const formatItem = (item: string | undefined) => item === 'N/A' ? '-' : item;

  return (
    <Dialog
      className='detail-dialog'
      aria-labelledby='label'
      onDismiss={onDismiss}
      initialFocusRef={buttonRef}
    >
      <div className='detail-dialog-header'>
        <div className='detail-dialog-title'>
          <h2>Details</h2>
        </div>
        <Button className='detail-dialog-close-button'>
          <CloseIcon
            ref={buttonRef}
            onClick={onDismiss}
          />
        </Button>
      </div>
      <div className='detail-dialog-content'>
        <h3>Title: {movie.Title}</h3>
        <p>ID: {imdbId}</p>
        <p>Released: {formatItem(movie.Released)}</p>
        <p>Genre: {formatItem(movie.Genre)}</p>
        <p>Plot: {formatItem(movie.Plot)}</p>
        <p>Country: {formatItem(movie.Country)}</p>
        <p>Director: {formatItem(movie.Director)}</p>
        <p>Actors: {formatItem(movie.Actors)}</p>
      </div>
    </Dialog>
  );
};

export default Modal;

####movie.tsx####
import React from 'react';
import { MovieProps } from '@/interface/MovieProps';
import { Link, Outlet, useLocation } from 'react-router-dom';

const Movie = ({movie}: {movie: MovieProps}) => {
  const poster = movie.Poster === 'N/A' ? 'No Image' : movie.Poster;
  const location = useLocation();

  return (
    <div className="movie">
      <div>
        <nav>
          <Link
            key={movie.imdbID}
            to={`/detail/${movie.imdbID}`}
            state={{ backgroundLocation: location }}
          >
            {movie.Title}
          </Link>
          <Outlet />
        </nav>
        <div>
          <img
            width="200"
            alt={`${movie.Title}`}
            src={poster}
          />
        </div>
        <p>({movie.Year})</p>
      </div>
    </div>
  );
};

export default Movie;

####searchConditionInput.tsx####
import React, { useState } from 'react';
import SelectBox, { SingleValue } from 'react-select';
import { Button } from '@material-ui/core';
import SearchIcon from '@mui/icons-material/Search';
import { SearchCondition } from '@/interface/SearchCondition';
import { Years } from '@/interface/Years';
import options from '../data/Years';

const SearchCondition = ({search}: {search: (searchCondition: SearchCondition) => void}) => {
  const initialState: SearchCondition = {
    Title: '',
    Year: '',
  };

  const [searchCondition, setSearchCondition] = useState(initialState);

  const handleSearchInputChanges = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchCondition({...searchCondition, [e.target.name]: e.target.value})
  };

  const handleSearchSelectChanges = (select: SingleValue<Years>) => {
    setSearchCondition({...searchCondition, [`${select?.name}`]: select?.value})
  }

  const callSearchFunction = (e: React.MouseEvent<SVGElement>) => {
    e.preventDefault();
    search(searchCondition);
  };

  const customStyles = {
    control: (styles: any) => ({
      ...styles,
      border: 'solid 1px black',
      cursor: 'pointer'
    }),
  };

  return (
    <form className="search">
      <h3 className="search-condition-item-name required">Title</h3>
      <input
        id="search-condition-title"
        name="Title"
        value={searchCondition.Title}
        onChange={handleSearchInputChanges}
        type="search"
      />
      <h3 className="search-condition-item-name">Year</h3>
      <SelectBox
        id="search-condition-year"
        name="Year"
        onChange={handleSearchSelectChanges}
        placeholder="YYYY"
        options={options}
        styles={customStyles}
        isClearable={true}
      />
      <Button>
        <SearchIcon
          className='search-button'
          onClick={callSearchFunction}
          type="submit"
          fontSize="large"
        />
      </Button>
    </form>
  );
};

export default SearchCondition;

####searchMovie.tsx####
import React, { useEffect, useReducer} from 'react';
import Movie from './Movie';
import SearchConditionInput from './SearchConditionInput';
import { initialState, SearchReducer } from '../store/reducer/SearchReducer';
import axios from 'axios';
import { Oval } from 'react-loader-spinner';
import { SearchActionType } from '../interface/SearchAction';
import { MovieProps } from '@/interface/MovieProps';
import { SearchCondition } from '@/interface/SearchCondition';
import { Outlet } from 'react-router-dom';

const INIT_SEARCH_URL = 'https://www.omdbapi.com/?s=transformers&apikey=4a3b711b';

const SearchMovie = () => {
  const [state, dispatch] = useReducer(SearchReducer, initialState);

  useEffect(() => {
    axios.get(INIT_SEARCH_URL)
    .then(jsonResponse => {
      dispatch({
        type: SearchActionType.SEARCH_MOVIES_SUCCESS,
        payload: jsonResponse.data.Search
      });
    });
  }, []);

  const search = (searchCondition: SearchCondition) => {
    dispatch({
      type: SearchActionType.SEARCH_MOVIES_REQUEST
    });

    axios(`https://www.omdbapi.com/?s=${searchCondition.Title}&y=${searchCondition.Year}&apikey=4a3b711b`)
    .then(jsonResponse => {
      if (jsonResponse.data.Response === 'True') {
        dispatch({
          type: SearchActionType.SEARCH_MOVIES_SUCCESS,
          payload: jsonResponse.data.Search
        });
      } else {
        dispatch({
          type: SearchActionType.SEARCH_MOVIES_FAILURE,
          error: jsonResponse.data.Error
        });
      }
    });
  };

  const { movies, errorMessage, loading } = state;

  const retrievedMovies =
    loading && !errorMessage ? (
      <div className="loader">
        <Oval
          color='gray'
          height='3rem'
          width='3rem'
        />
      </div>
    ) : errorMessage ? (
      <div className="errorMessage">{errorMessage}</div>
    ) : (
      movies.map((movie: MovieProps, index: number) => {
        return (
          <Movie key={`${index}-${movie.imdbID}`} movie={movie} />
        )
      })
    );

  return (
    <div className="search-movie-component">
      <div className="m-container">
        <SearchConditionInput search={search} />
        <p className="App-intro">Sharing a few of our favourite movies</p>
        <div className="movies">
          {retrievedMovies}
        </div>
      </div>
      <Outlet />
    </div>
  );
};

export default SearchMovie;
